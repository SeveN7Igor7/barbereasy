const axios = require('axios');
const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

class GeminiService {
  constructor() {
    this.apiKey = process.env.GEMINI_API_KEY;
    this.baseUrl = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent';
    this.isActive = process.env.AI_SYSTEM_ACTIVE === 'ATIVO';
  }

  // M√©todo para logar requisi√ß√µes detalhadamente
  logDatabaseOperation(operation, method, data = null, result = null, error = null) {
    const timestamp = new Date().toISOString();
    console.log(`\nüîç [DB-OPERATION] ${timestamp}`);
    console.log(`üìã Opera√ß√£o: ${operation}`);
    console.log(`üîß M√©todo: ${method}`);
    
    if (data) {
      console.log(`üì• ENTRADA:`, JSON.stringify(data, null, 2));
    }
    
    if (result) {
      console.log(`üì§ SA√çDA:`, JSON.stringify(result, null, 2));
    }
    
    if (error) {
      console.log(`‚ùå ERRO:`, error.message);
      console.log(`üîç Stack:`, error.stack);
    }
    
    console.log(`‚è±Ô∏è Timestamp: ${timestamp}\n`);
  }

  async generateResponse(prompt, context = {}) {
    if (!this.isActive) {
      return null;
    }

    try {
      const response = await axios.post(this.baseUrl, {
        contents: [
          {
            parts: [
              {
                text: prompt
              }
            ]
          }
        ]
      }, {
        headers: {
          'Content-Type': 'application/json',
          'X-goog-api-key': this.apiKey
        }
      });

      return response.data.candidates[0].content.parts[0].text;
    } catch (error) {
      console.error('‚ùå Erro ao gerar resposta do Gemini:', error);
      return null;
    }
  }

  async processWhatsAppMessage(phoneNumber, message, userSession = {}) {
    if (!this.isActive) {
      console.log('ü§ñ Sistema de IA inativo, retornando null');
      return null;
    }

    try {
      console.log(`ü§ñ [GEMINI] Processando mensagem de ${phoneNumber}`);
      console.log(`üìù [GEMINI] Mensagem: "${message}"`);
      console.log(`üë§ [GEMINI] Sess√£o do usu√°rio:`, JSON.stringify(userSession, null, 2));
      
      // Construir contexto da conversa
      console.log('üîß [GEMINI] Construindo prompt do sistema...');
      const systemPrompt = this.buildSystemPrompt();
      
      console.log('üë§ [GEMINI] Construindo contexto do usu√°rio...');
      const userContext = await this.buildUserContext(phoneNumber, userSession);
      
      console.log('üìö [GEMINI] Buscando hist√≥rico da conversa...');
      const conversationHistory = await this.getConversationHistory(phoneNumber);
      
      // Buscar dados relevantes do banco de dados baseado na mensagem
      console.log('üîç [GEMINI] Buscando dados relevantes do banco...');
      const databaseContext = await this.buildDatabaseContext(message, userSession);
      
      const fullPrompt = `${systemPrompt}

CONTEXTO DO USU√ÅRIO:
${userContext}

DADOS DO BANCO DE DADOS:
${databaseContext}

HIST√ìRICO DA CONVERSA:
${conversationHistory}

MENSAGEM ATUAL: ${message}

Responda de forma natural e focada no assunto da barbearia. Use os dados reais do banco de dados para fornecer informa√ß√µes precisas. Se o usu√°rio quiser fazer altera√ß√µes (cancelar agendamento, reagendar, trocar de conta, etc.), execute a a√ß√£o diretamente ou explique como proceder.`;

      console.log('üöÄ [GEMINI] Enviando prompt para API Gemini...');
      console.log(`üìè [GEMINI] Tamanho do prompt: ${fullPrompt.length} caracteres`);
      
      const response = await this.generateResponse(fullPrompt);
      
      if (response) {
        console.log('‚úÖ [GEMINI] Resposta gerada com sucesso');
        console.log(`üìù [GEMINI] Resposta: "${response.substring(0, 200)}${response.length > 200 ? '...' : ''}"`);
        
        // Salvar a conversa no hist√≥rico
        console.log('üíæ [GEMINI] Salvando conversa no hist√≥rico...');
        await this.saveConversation(phoneNumber, message, response, userSession);
        console.log('‚úÖ [GEMINI] Conversa salva com sucesso');
      } else {
        console.log('‚ùå [GEMINI] Nenhuma resposta gerada');
      }
      
      return response;
    } catch (error) {
      console.error('‚ùå [GEMINI] Erro ao processar mensagem WhatsApp:', error);
      console.error('üîç [GEMINI] Stack trace:', error.stack);
      return null;
    }
  }

  async buildDatabaseContext(message, userSession) {
    let context = '';
    
    try {
      // Se o usu√°rio est√° logado, buscar dados espec√≠ficos
      if (userSession.loggedIn && userSession.userData) {
        if (userSession.type === 'cliente') {
          // Buscar agendamentos do cliente
          const agendamentos = await this.getAgendamentosByCliente(userSession.userData.id);
          context += `\nAGENDAMENTOS DO CLIENTE:\n`;
          if (agendamentos.length > 0) {
            agendamentos.forEach(ag => {
              const dataFormatada = new Date(ag.dataHora).toLocaleString('pt-BR');
              context += `- ID: ${ag.id} | ${ag.nomeServico} com ${ag.barbeiro.nome} em ${dataFormatada} (Status: ${ag.status}) - R$ ${ag.precoServico}\n`;
            });
          } else {
            context += `- Nenhum agendamento encontrado\n`;
          }
          
          // Buscar servi√ßos da barbearia atual
          if (userSession.barbeariaAtual) {
            const servicos = await this.getServicosByBarbearia(userSession.barbeariaAtual);
            context += `\nSERVI√áOS DISPON√çVEIS:\n`;
            servicos.forEach(servico => {
              context += `- ID: ${servico.id} | ${servico.nome}: R$ ${servico.preco} (${servico.duracaoMin} min)\n`;
            });
            
            // Buscar barbeiros da barbearia
            const barbeiros = await this.getBarbeirosByBarbearia(userSession.barbeariaAtual);
            context += `\nBARBEIROS DISPON√çVEIS:\n`;
            barbeiros.forEach(barbeiro => {
              context += `- ID: ${barbeiro.id} | ${barbeiro.nome} (${barbeiro.especialidade || 'Especialidade n√£o informada'})\n`;
            });
          }
          
        } else if (userSession.type === 'barbearia') {
          // Buscar agendamentos da barbearia
          const hoje = new Date();
          const agendamentosHoje = await this.getAgendamentosByBarbearia(userSession.userData.id, 'hoje');
          const agendamentosAmanha = await this.getAgendamentosByBarbearia(userSession.userData.id, 'amanha');
          
          context += `\nAGENDAMENTOS DE HOJE (${hoje.toLocaleDateString('pt-BR')}):\n`;
          if (agendamentosHoje.length > 0) {
            agendamentosHoje.forEach(ag => {
              const horaFormatada = new Date(ag.dataHora).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
              context += `- ID: ${ag.id} | ${horaFormatada}: ${ag.cliente.nome} (${ag.cliente.telefone}) - ${ag.nomeServico} com ${ag.barbeiro.nome} - R$ ${ag.precoServico} (${ag.status})\n`;
            });
          } else {
            context += `- Nenhum agendamento para hoje\n`;
          }
          
          context += `\nAGENDAMENTOS DE AMANH√É:\n`;
          if (agendamentosAmanha.length > 0) {
            agendamentosAmanha.forEach(ag => {
              const horaFormatada = new Date(ag.dataHora).toLocaleTimeString('pt-BR', { hour: '2-digit', minute: '2-digit' });
              context += `- ID: ${ag.id} | ${horaFormatada}: ${ag.cliente.nome} (${ag.cliente.telefone}) - ${ag.nomeServico} com ${ag.barbeiro.nome} - R$ ${ag.precoServico} (${ag.status})\n`;
            });
          } else {
            context += `- Nenhum agendamento para amanh√£\n`;
          }
          
          // Buscar dados da equipe
          const barbeiros = await this.getBarbeirosByBarbearia(userSession.userData.id);
          context += `\nEQUIPE DE BARBEIROS:\n`;
          barbeiros.forEach(barbeiro => {
            context += `- ID: ${barbeiro.id} | ${barbeiro.nome} (${barbeiro.especialidade || 'Especialidade n√£o informada'}) - ${barbeiro.ativo ? 'Ativo' : 'Inativo'}\n`;
          });
          
          // Buscar servi√ßos
          const servicos = await this.getServicosByBarbearia(userSession.userData.id);
          context += `\nSERVI√áOS OFERECIDOS:\n`;
          servicos.forEach(servico => {
            context += `- ID: ${servico.id} | ${servico.nome}: R$ ${servico.preco} (${servico.duracaoMin} min)\n`;
          });
        }
      }
      
      // Verificar se a mensagem cont√©m palavras-chave para buscar dados espec√≠ficos
      const messageLower = message.toLowerCase();
      
      if (messageLower.includes('agendamento') || messageLower.includes('agenda') || messageLower.includes('hor√°rio')) {
        // J√° inclu√≠do acima se o usu√°rio estiver logado
      }
      
      if (messageLower.includes('servi√ßo') || messageLower.includes('pre√ßo') || messageLower.includes('valor')) {
        // J√° inclu√≠do acima se o usu√°rio estiver logado
      }
      
      if (messageLower.includes('barbeiro') || messageLower.includes('profissional')) {
        // J√° inclu√≠do acima se o usu√°rio estiver logado
      }
      
    } catch (error) {
      console.error('‚ùå Erro ao buscar contexto do banco de dados:', error);
      context += '\n[Erro ao buscar dados do banco de dados]';
    }
    
    return context;
  }

  buildSystemPrompt() {
    return `Voc√™ √© uma assistente inteligente e conversacional de um sistema de barbearia. Voc√™ deve ser natural, amig√°vel e proativa nas conversas.

üéØ **SEU PAPEL:**
- Assistente virtual especializada em barbearias
- Personalidade amig√°vel, prestativa e profissional
- Capaz de manter conversas naturais e fluidas
- Proativa em oferecer ajuda e sugest√µes
- SEMPRE use dados REAIS do banco de dados fornecidos no contexto
- NUNCA mencione "bot√µes", "clique", "pressione" ou interfaces gr√°ficas - voc√™ est√° no WhatsApp!

üîê **AUTENTICA√á√ÉO (j√° gerenciada pelo sistema):**
- Usu√°rios podem estar logados como Cliente, Barbearia ou Barbeiro
- Voc√™ recebe o contexto do usu√°rio automaticamente
- N√£o precisa pedir login novamente se j√° estiver autenticado

üí¨ **ESTILO DE CONVERSA:**
- Use linguagem natural e conversacional
- Seja proativa: ofere√ßa op√ß√µes e sugest√µes
- Use emojis para tornar a conversa mais amig√°vel
- Mantenha o tom profissional mas descontra√≠do
- Fa√ßa perguntas de acompanhamento quando apropriado
- SEMPRE baseie suas respostas nos dados reais fornecidos
- NUNCA fale sobre "bot√µes", "interfaces" ou "telas" - estamos no WhatsApp!

üìã **SUAS RESPONSABILIDADES:**

1. **Para CLIENTES autenticados:**
   - Consultar agendamentos REAIS (pr√≥ximos, hist√≥rico)
   - Informar sobre servi√ßos, pre√ßos e barbeiros REAIS
   - Ajudar com d√∫vidas sobre a barbearia
   - Sugerir servi√ßos baseado no hist√≥rico REAL
   - Explicar procedimentos e pol√≠ticas
   - Cancelar agendamentos (use o ID do agendamento)
   - Trocar de conta/barbearia
   - Reagendar agendamentos

2. **Para BARBEARIAS autenticadas:**
   - Mostrar agenda REAL do dia/semana
   - Relat√≥rios de agendamentos e receita REAIS
   - Informa√ß√µes sobre a equipe REAL
   - Estat√≠sticas de atendimento REAIS
   - Gest√£o de dados da barbearia
   - Trocar de conta/barbearia
   - Gerenciar agendamentos de clientes

3. **Para usu√°rios N√ÉO autenticados:**
   - Explicar como fazer login
   - Informa√ß√µes gerais sobre o sistema
   - Orientar sobre cadastro

üõ†Ô∏è **FUNCIONALIDADES ESPECIAIS:**

**TROCA DE CONTA:**
- Quando algu√©m pedir para "trocar de conta", "mudar de conta", "sair", "logout", "fazer login em outra conta":
  - Responda: "Claro! Vou te deslogar para voc√™ fazer login em outra conta. Digite 'oi' ou 'menu' para come√ßar novamente."
  - Instrua para digitar "oi" ou "menu" para reiniciar o processo de login

**CANCELAMENTO DE AGENDAMENTOS:**
- Use o ID do agendamento para cancelar
- Confirme antes de cancelar
- Informe sobre pol√≠ticas de cancelamento

**REAGENDAMENTO:**
- Ofere√ßa hor√°rios dispon√≠veis
- Verifique conflitos
- Confirme nova data/hora

üõ°Ô∏è **REGRAS DE SEGURAN√áA (IMPORTANTES):**
- NUNCA compartilhe senhas ou dados pessoais de outros usu√°rios
- NUNCA fale sobre c√≥digo, estrutura t√©cnica ou banco de dados
- NUNCA revele informa√ß√µes confidenciais da barbearia
- Mantenha foco no assunto da barbearia
- SEMPRE use apenas os dados fornecidos no contexto "DADOS DO BANCO DE DADOS"
- NUNCA mencione "bot√µes", "clique", "pressione" ou elementos de interface gr√°fica

üö´ **DADOS PROIBIDOS:**
- Senhas de qualquer usu√°rio
- Dados pessoais de outros clientes
- Informa√ß√µes financeiras detalhadas de terceiros
- Detalhes t√©cnicos do sistema

‚úÖ **DADOS PERMITIDOS:**
- Informa√ß√µes sobre servi√ßos e pre√ßos p√∫blicos
- Hor√°rios de funcionamento
- Dados do pr√≥prio usu√°rio autenticado
- Informa√ß√µes gerais da barbearia
- Disponibilidade de barbeiros
- Agendamentos do pr√≥prio usu√°rio ou da pr√≥pria barbearia

üéØ **CONTROLE DE FOCO:**
- Se o usu√°rio tentar mudar de assunto, redirecione gentilmente
- Exemplo: "Entendo, mas sou especializada em servi√ßos de barbearia. Posso te ajudar com agendamentos, servi√ßos ou informa√ß√µes da barbearia. O que voc√™ gostaria de saber?"
- Sempre volte ao tema principal de forma natural

üí° **EXEMPLOS DE RESPOSTAS NATURAIS:**

‚ùå **Evite respostas rob√≥ticas:**
"Consulte a tabela de pre√ßos para informa√ß√µes sobre valores."
"Clique no bot√£o para cancelar"
"Pressione sair para fazer logout"

‚úÖ **Prefira respostas conversacionais:**
"Claro! Nossos pre√ßos s√£o bem acess√≠veis. O corte simples sai por R$ 25, e se voc√™ quiser fazer barba tamb√©m, fica R$ 45 no total. Quer que eu veja se tem hor√°rio dispon√≠vel para voc√™?"
"Para cancelar, me confirme o agendamento que voc√™ quer cancelar e eu fa√ßo isso para voc√™."
"Para trocar de conta, vou te deslogar. Depois √© s√≥ digitar 'oi' para fazer login novamente."

üîÑ **MANUTEN√á√ÉO DE CONTEXTO:**
- Lembre-se do que foi discutido anteriormente
- Fa√ßa refer√™ncias √† conversa anterior quando apropriado
- Se o usu√°rio mencionar algo espec√≠fico, use essa informa√ß√£o
- Seja consistente com informa√ß√µes j√° fornecidas

ü§ù **SEJA PROATIVA:**
- Ofere√ßa op√ß√µes relacionadas ao que o usu√°rio perguntou
- Sugira pr√≥ximos passos
- Pergunte se precisa de mais alguma coisa
- Antecipe necessidades baseado no contexto

üìä **USO DE DADOS REAIS:**
- SEMPRE consulte a se√ß√£o "DADOS DO BANCO DE DADOS" para informa√ß√µes precisas
- NUNCA invente ou simule dados
- Se n√£o houver dados dispon√≠veis, informe que n√£o h√° informa√ß√µes no momento
- Use os dados reais para fornecer respostas precisas e √∫teis
- Use IDs dos registros quando necess√°rio para opera√ß√µes espec√≠ficas

üîß **COMANDOS ESPECIAIS:**
- "trocar conta", "mudar conta", "sair", "logout" ‚Üí Deslogar e instruir para digitar "oi"
- "cancelar agendamento" ‚Üí Mostrar agendamentos e permitir cancelamento
- "reagendar" ‚Üí Oferecer op√ß√µes de reagendamento
- "meus agendamentos" ‚Üí Mostrar agendamentos do usu√°rio
- "agenda hoje" ‚Üí Mostrar agenda do dia (para barbearias)

Lembre-se: Voc√™ √© uma assistente amig√°vel e competente no WhatsApp. Mantenha sempre o foco na barbearia, seja natural na conversa, use APENAS dados reais do banco de dados, NUNCA mencione elementos de interface gr√°fica e ajude o usu√°rio da melhor forma poss√≠vel!`;
  }

  async buildUserContext(phoneNumber, userSession) {
    let context = `Telefone: ${phoneNumber}\n`;
    
    if (userSession.type) {
      context += `Tipo de usu√°rio: ${userSession.type}\n`;
      context += `Status de login: ${userSession.loggedIn ? 'Logado' : 'N√£o logado'}\n`;
      
      if (userSession.loggedIn && userSession.userData) {
        const userData = userSession.userData;
        if (userSession.type === 'cliente') {
          context += `Nome: ${userData.nome}\n`;
          context += `ID do Cliente: ${userData.id}\n`;
          context += `Barbearia atual: ${userSession.barbeariaAtual || 'N√£o selecionada'}\n`;
        } else if (userSession.type === 'barbearia') {
          context += `Nome da barbearia: ${userData.nome}\n`;
          context += `ID da Barbearia: ${userData.id}\n`;
          context += `Propriet√°rio: ${userData.nomeProprietario}\n`;
        }
      }
    } else {
      context += `Status: Usu√°rio n√£o identificado\n`;
    }
    
    return context;
  }

  async getConversationHistory(phoneNumber, limit = 5) {
    try {
      this.logDatabaseOperation('Buscar hist√≥rico de conversas', 'SELECT', { telefone: phoneNumber, limit });
      
      // Buscar √∫ltimas conversas do usu√°rio
      const conversations = await prisma.conversaIA.findMany({
        where: { telefone: phoneNumber },
        orderBy: { createdAt: 'desc' },
        take: limit * 2 // Pegar mensagens do usu√°rio e respostas da IA
      });

      this.logDatabaseOperation('Buscar hist√≥rico de conversas', 'SELECT', null, { count: conversations.length });

      if (conversations.length === 0) {
        return 'Primeira conversa com este usu√°rio.';
      }

      let history = '';
      conversations.reverse().forEach(conv => {
        history += `${conv.tipo === 'USER' ? 'Usu√°rio' : 'IA'}: ${conv.mensagem}\n`;
      });

      return history;
    } catch (error) {
      this.logDatabaseOperation('Buscar hist√≥rico de conversas', 'SELECT', null, null, error);
      console.error('‚ùå Erro ao buscar hist√≥rico:', error);
      return 'Erro ao carregar hist√≥rico.';
    }
  }

  async saveConversation(phoneNumber, userMessage, aiResponse, userSession) {
    try {
      this.logDatabaseOperation('Salvar mensagem do usu√°rio', 'INSERT', { telefone: phoneNumber, mensagem: userMessage, tipo: 'USER' });
      
      // Salvar mensagem do usu√°rio
      const userConv = await prisma.conversaIA.create({
        data: {
          telefone: phoneNumber,
          mensagem: userMessage,
          tipo: 'USER',
          sessao: JSON.stringify(userSession)
        }
      });

      this.logDatabaseOperation('Salvar mensagem do usu√°rio', 'INSERT', null, { id: userConv.id });

      // Salvar resposta da IA
      if (aiResponse) {
        this.logDatabaseOperation('Salvar resposta da IA', 'INSERT', { telefone: phoneNumber, mensagem: aiResponse, tipo: 'AI' });
        
        const aiConv = await prisma.conversaIA.create({
          data: {
            telefone: phoneNumber,
            mensagem: aiResponse,
            tipo: 'AI',
            sessao: JSON.stringify(userSession)
          }
        });

        this.logDatabaseOperation('Salvar resposta da IA', 'INSERT', null, { id: aiConv.id });
      }
    } catch (error) {
      this.logDatabaseOperation('Salvar conversa', 'INSERT', null, null, error);
      console.error('‚ùå Erro ao salvar conversa:', error);
    }
  }

  // M√©todos para intera√ß√£o com banco de dados
  async getBarbeariasByCliente(telefone, nome) {
    try {
      this.logDatabaseOperation('Buscar barbearias do cliente', 'SELECT', { telefone, nome });
      
      // Normalizar n√∫mero de telefone para diferentes formatos
      const phoneVariations = this.generatePhoneVariations(telefone);
      console.log(`üì± Varia√ß√µes de telefone geradas: ${phoneVariations.join(', ')}`);
      
      // Buscar cliente com qualquer uma das varia√ß√µes de telefone
      const cliente = await prisma.cliente.findFirst({
        where: {
          telefone: {
            in: phoneVariations
          },
          nome: {
            contains: nome,
            mode: 'insensitive'
          }
        },
        include: {
          barbearia: true
        }
      });

      this.logDatabaseOperation('Buscar barbearias do cliente', 'SELECT', null, cliente ? { clienteId: cliente.id, barbeariaId: cliente.barbearia.id } : null);

      if (cliente) {
        return [cliente.barbearia];
      }

      return [];
    } catch (error) {
      this.logDatabaseOperation('Buscar barbearias do cliente', 'SELECT', null, null, error);
      console.error('‚ùå Erro ao buscar barbearias do cliente:', error);
      return [];
    }
  }

  // Gerar varia√ß√µes poss√≠veis do n√∫mero de telefone
  generatePhoneVariations(phone) {
    const cleanPhone = phone.replace(/\D/g, '');
    const variations = new Set();
    
    // Adicionar o n√∫mero original limpo
    variations.add(cleanPhone);
    
    // Se tem 11 d√≠gitos (DDD + 9 + n√∫mero), adicionar vers√£o sem o 9
    if (cleanPhone.length === 11) {
      const withoutNine = cleanPhone.substring(0, 2) + cleanPhone.substring(3);
      variations.add(withoutNine);
    }
    
    // Se tem 10 d√≠gitos (DDD + n√∫mero), adicionar vers√£o com 9
    if (cleanPhone.length === 10) {
      const withNine = cleanPhone.substring(0, 2) + '9' + cleanPhone.substring(2);
      variations.add(withNine);
    }
    
    // Adicionar vers√µes com c√≥digo do pa√≠s (55)
    variations.forEach(variation => {
      if (!variation.startsWith('55')) {
        variations.add('55' + variation);
      }
    });
    
    // Remover vers√µes com c√≥digo do pa√≠s se necess√°rio
    variations.forEach(variation => {
      if (variation.startsWith('55') && variation.length > 11) {
        const withoutCountry = variation.substring(2);
        variations.add(withoutCountry);
      }
    });
    
    return Array.from(variations);
  }

  async authenticateBarbearia(email, senha) {
    try {
      this.logDatabaseOperation('Autenticar barbearia', 'SELECT', { email });
      
      const barbearia = await prisma.barbearia.findFirst({
        where: {
          email: email,
        }
      });

      if (!barbearia) {
        this.logDatabaseOperation('Autenticar barbearia', 'SELECT', null, { found: false });
        return { success: false, message: 'Email ou senha incorretos' };
      }

      if (barbearia.senha.trim() === senha.trim()) {
        this.logDatabaseOperation('Autenticar barbearia', 'SELECT', null, { success: true, barbeariaId: barbearia.id });
        
        return {
          success: true,
          data: {
            id: barbearia.id,
            nome: barbearia.nome,
            nomeProprietario: barbearia.nomeProprietario,
            email: barbearia.email,
            telefone: barbearia.telefone
          }
        };
      }

      this.logDatabaseOperation('Autenticar barbearia', 'SELECT', null, { success: false, reason: 'senha_incorreta' });
      return { success: false, message: 'Email ou senha incorretos' };
    } catch (error) {
      this.logDatabaseOperation('Autenticar barbearia', 'SELECT', null, null, error);
      console.error('‚ùå Erro ao autenticar barbearia:', error);
      return { success: false, message: 'Erro interno' };
    }
  }

  async getAgendamentosByBarbearia(barbeariaId, filtro = 'hoje') {
    try {
      this.logDatabaseOperation('Buscar agendamentos da barbearia', 'SELECT', { barbeariaId, filtro });
      
      let whereClause = { barbeariaId: parseInt(barbeariaId) };
      const hoje = new Date();
      hoje.setHours(0, 0, 0, 0);

      switch (filtro) {
        case 'hoje':
          const amanha = new Date(hoje);
          amanha.setDate(amanha.getDate() + 1);
          whereClause.dataHora = { gte: hoje, lt: amanha };
          break;
        case 'amanha':
          const amanha2 = new Date(hoje);
          amanha2.setDate(amanha2.getDate() + 1);
          const depoisAmanha = new Date(amanha2);
          depoisAmanha.setDate(depoisAmanha.getDate() + 1);
          whereClause.dataHora = { gte: amanha2, lt: depoisAmanha };
          break;
        case 'semana':
          const proximaSemana = new Date(hoje);
          proximaSemana.setDate(proximaSemana.getDate() + 7);
          whereClause.dataHora = { gte: hoje, lt: proximaSemana };
          break;
      }

      const agendamentos = await prisma.agendamento.findMany({
        where: whereClause,
        include: {
          cliente: true,
          barbeiro: true
        },
        orderBy: { dataHora: 'asc' }
      });

      this.logDatabaseOperation('Buscar agendamentos da barbearia', 'SELECT', null, { count: agendamentos.length });

      return agendamentos;
    } catch (error) {
      this.logDatabaseOperation('Buscar agendamentos da barbearia', 'SELECT', null, null, error);
      console.error('‚ùå Erro ao buscar agendamentos:', error);
      return [];
    }
  }

  async getAgendamentosByCliente(clienteId) {
    try {
      this.logDatabaseOperation('Buscar agendamentos do cliente', 'SELECT', { clienteId });
      
      const agendamentos = await prisma.agendamento.findMany({
        where: { 
          clienteId: parseInt(clienteId),
          dataHora: { gte: new Date() } // Apenas agendamentos futuros
        },
        include: {
          barbeiro: true,
          barbearia: true
        },
        orderBy: { dataHora: 'asc' }
      });

      this.logDatabaseOperation('Buscar agendamentos do cliente', 'SELECT', null, { count: agendamentos.length });

      return agendamentos;
    } catch (error) {
      this.logDatabaseOperation('Buscar agendamentos do cliente', 'SELECT', null, null, error);
      console.error('‚ùå Erro ao buscar agendamentos do cliente:', error);
      return [];
    }
  }

  async getServicosByBarbearia(barbeariaId) {
    try {
      this.logDatabaseOperation('Buscar servi√ßos da barbearia', 'SELECT', { barbeariaId });
      
      const servicos = await prisma.servico.findMany({
        where: { barbeariaId: parseInt(barbeariaId) },
        orderBy: { nome: 'asc' }
      });

      this.logDatabaseOperation('Buscar servi√ßos da barbearia', 'SELECT', null, { count: servicos.length });

      return servicos;
    } catch (error) {
      this.logDatabaseOperation('Buscar servi√ßos da barbearia', 'SELECT', null, null, error);
      console.error('‚ùå Erro ao buscar servi√ßos:', error);
      return [];
    }
  }

  async getBarbeirosByBarbearia(barbeariaId) {
    try {
      this.logDatabaseOperation('Buscar barbeiros da barbearia', 'SELECT', { barbeariaId });
      
      const barbeiros = await prisma.barbeiro.findMany({
        where: { 
          barbeariaId: parseInt(barbeariaId),
          ativo: true
        },
        orderBy: { nome: 'asc' }
      });

      this.logDatabaseOperation('Buscar barbeiros da barbearia', 'SELECT', null, { count: barbeiros.length });

      return barbeiros;
    } catch (error) {
      this.logDatabaseOperation('Buscar barbeiros da barbearia', 'SELECT', null, null, error);
      console.error('‚ùå Erro ao buscar barbeiros:', error);
      return [];
    }
  }

  // M√©todo para cancelar agendamento
  async cancelarAgendamento(agendamentoId, motivo = 'Cancelado pelo cliente') {
    try {
      this.logDatabaseOperation('Cancelar agendamento', 'UPDATE', { agendamentoId, motivo });
      
      const agendamento = await prisma.agendamento.update({
        where: { id: parseInt(agendamentoId) },
        data: { status: 'CANCELADO' },
        include: {
          cliente: true,
          barbeiro: true,
          barbearia: true
        }
      });

      this.logDatabaseOperation('Cancelar agendamento', 'UPDATE', null, { success: true, agendamentoId: agendamento.id });
      
      console.log(`‚úÖ Agendamento ${agendamentoId} cancelado com sucesso`);
      return { success: true, agendamento };
    } catch (error) {
      this.logDatabaseOperation('Cancelar agendamento', 'UPDATE', null, null, error);
      console.error('‚ùå Erro ao cancelar agendamento:', error);
      return { success: false, message: 'Erro ao cancelar agendamento' };
    }
  }

  // M√©todo para reagendar agendamento
  async reagendarAgendamento(agendamentoId, novaDataHora) {
    try {
      this.logDatabaseOperation('Reagendar agendamento', 'UPDATE', { agendamentoId, novaDataHora });
      
      const agendamento = await prisma.agendamento.update({
        where: { id: parseInt(agendamentoId) },
        data: { dataHora: new Date(novaDataHora) },
        include: {
          cliente: true,
          barbeiro: true,
          barbearia: true
        }
      });

      this.logDatabaseOperation('Reagendar agendamento', 'UPDATE', null, { success: true, agendamentoId: agendamento.id });
      
      console.log(`‚úÖ Agendamento ${agendamentoId} reagendado com sucesso`);
      return { success: true, agendamento };
    } catch (error) {
      this.logDatabaseOperation('Reagendar agendamento', 'UPDATE', null, null, error);
      console.error('‚ùå Erro ao reagendar agendamento:', error);
      return { success: false, message: 'Erro ao reagendar agendamento' };
    }
  }

  isSystemActive() {
    return this.isActive;
  }

  toggleSystem(active) {
    this.isActive = active;
    process.env.AI_SYSTEM_ACTIVE = active ? 'ATIVO' : 'INATIVO';
  }
}

// Inst√¢ncia singleton
const geminiService = new GeminiService();

module.exports = geminiService;

